#version: 2
#jobs:
#  build:
#    working_directory: ~/code
#    docker:
#    - image: circleci/android:api-28-alpha
#    environment:
#      JVM_OPTS: -Xmx3200m
#    steps:
#    - checkout
#    - restore_cache:
#        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#    - run:
#       name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
#       command: sudo chmod +x ./gradlew
#    - run:
#        name: Download Dependencies
#        command: ./gradlew androidDependencies
#    - save_cache:
#        paths:
#        - ~/.gradle
#        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#  lintTest:
#    docker:
#    - run:
#        name: Lint Tests
#        command: ./gradlew lint test
#    - run:
#        name: CheckStyle Tests
#        command: ./gradlew checkstyle
#    - run:
#        name: PMD Tests
#        command: ./gradlew pmd
#    - run:
#        name: Findbugs Tests
#        command: ./gradlew findbugs
#    - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
#        path: app/build/reports
#        destination: reports
#    - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
#        path: app/build/test-results
#    # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
#    - run:
#        name: Build
#        command: ./gradlew assembleRelease
#    - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
#        path: app/build/outputs/apk
#        destination: release
#    - deploy:
#        name: Deploy APK.
#        command: |
#          if [ "${CIRCLE_BRANCH}" == "master" ]; then
#            bash ./scripts/deploy-fabric.sh
#          fi
#          if [ "${CIRCLE_BRANCH}" == "develop" ]; then
#            bash ./scripts/deploy-appcenter.sh
#          fi


aliases:
  - &attach_workspace
    attach_workspace:
      at: ~/code
  - &environment
      docker:
        - image: circleci/android:api-28-alpha
      environment:
        JVM_OPTS: -Xmx3200m
  - &tests
    - "Lint"
    - "Checkstyle"
    - "PMD"
    - "FindBugs"
version: 2
jobs:
  "Dependencies":
    <<: *environment
    steps:
      - checkout
      - *attach_workspace
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
          - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
  "Lint":
    <<: *environment
    working_directory: ~/code
    steps:
      - run:
          command: ./gradlew lint test
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: lint
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
          destination: lint
  "Checkstyle":
    <<: *environment
    working_directory: ~/code
    steps:
      - run:
          command: ./gradlew checkstyle
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: checkstyle
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
          destination: checkstyls
  "PMD":
    <<: *environment
    working_directory: ~/code
    steps:
      - run:
          command: ./gradlew pmd
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: pmd
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
          destination: pmd
  "Findbugs":
    <<: *environment
    working_directory: ~/code
    steps:
      - run:
          command: ./gradlew findbugs
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: findbugs
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
          destination: findbugs
  "Build":
    <<: *environment
    working_directory: ~/code
    steps:
      - run:
          command: ./gradlew assembleRelease
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/outputs/apk
          destination: release
  "Deploy":
    <<: *environment
    working_directory: ~/code
    steps:
      - run:
        command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            bash ./scripts/deploy-fabric.sh
          fi
          if [ "${CIRCLE_BRANCH}" == "develop" ]; then
            bash ./scripts/deploy-appcenter.sh
          fi
workflows:
  versoion: 2
  build-test-and-deploy:
    jobs:
      - "Dependencies"
      - "Lint":
          requires: "Dependencies"
      - "Checkstyle":
          requires: "Dependencies"
      - "PMD":
          requires: "Dependencies"
      - "FindBugs":
          requires: "Dependencies"
      - "Build":
          requires: *tests
      - "Deploy":
          requires: "Build"